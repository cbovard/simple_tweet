<?php
// $Id$
/**
 * Simple Tweet Module
 */
 
/**
 * Constants
 */ 
define('SIMPLE_TWEET_PAGE', variable_get('simple_tweet_tweets_path', ''));
define('SIMPLE_TWEET_PAGENAME', variable_get('simple_tweet_tweets_page_title', 'Our Tweets From Twitter'));

/**
 * Implementation of hook_menu()
 */
function simple_tweet_menu() {
  $items = array();
  $items['admin/settings/simple-tweet'] = array(
    'title' => t('Simple Tweet Settings'),
    'access arguments' => array('administer simple tweet'),
    'description' => t('Simple Tweet Settings and Configuration Page'),
    'page callback' => drupal_get_form,
    'page arguments' => array('simple_tweet_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simple_tweet.admin.inc',
  );
  $items[SIMPLE_TWEET_PAGE] = array(
    'title' => SIMPLE_TWEET_PAGENAME,
    'access arguments' => array('see tweets'),
    'description' => 'Twitter Tweets Page',
    'page callback' => simple_tweet_show_tweets,
  );
  return $items;
}

/**
 * Implementation of hook_perm
 */
function simple_tweet_perm() {
  return array('administer simple tweet', 'see tweets');
}

/**
 * Implementation of hook_block
 * This has 2 different blocks. One for only one tweet
 * and one for multiple tweets.
 */
function simple_tweet_block($op = 'list', $delta = 0, $edit = array()) {
  $block_tweets = variable_get('simple_tweet_block_number', "1");
  switch ($op) {
    //list
    case 'list': 
      $blocks[0] = array(
      'info' => t('Latest Tweets - Multiple Tweets Block'),
      'status' => FALSE,
      );
      $blocks[1] = array(
      'info' => t('Latest Tweet - Single Tweet Block'),
      'status' => FALSE,
      );
      return $blocks;
    break;

    //configure
    case 'configure':
      return $form;
    break;

    //view & default
    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('Latest Tweets');
          $twitters = _simple_tweet_get_twitters();
          $block['content'] = theme('simple_tweet_list', $twitters, $block_tweets);
        break;
        case 1:
          $block['subject'] = t('Latest Tweet');
          $twitters = _simple_tweet_get_twitters();
          //the variable here is different on the end because there is only one tweet.
          $block['content'] = theme('simple_tweet_list', $twitters, 1);
        break;
      } //end switch
  return $block;
  }
}

/**
 * Callback Functions
 */
function simple_tweet_show_tweets() {
  $twitters = _simple_tweet_get_twitters();
  $op .= theme('simple_tweet_list', $twitters, NULL);
  return $op;
}

/**
 * Implementation of hook_theme
 *
 * @return array of theme functions
 */
function simple_tweet_theme() {
  return array(
  'simple_tweet_list' => array('arguments' => array('twitters' => NULL, 'number' => NULL)),
  'simple_tweet_tweet' => array('arguments' => array('twit' => NULL)),
  );
}

/**
 * theme_simple_tweet_list - format a list of tweets
 *
 * @param object $twitters
 * @param int $number
 * @return string
 */
function theme_simple_tweet_list($twitters, $number = NULL) {
  $op = '';
  //if number of tweets is not 1
  if ($number != '1') {
    $op .= '<div class="simple-tweet-timeline">';
  }
  $count = 0;
  
  //if this is the tweets page
  if ($number == NULL) {
    $count = count($twitters->channel->item);
    for ($i=0; $i<$count; $i++) {
	  //assign zebra
	  $zebra = ($i % 2) ? ' odd' : ' even';
      $op .= theme('simple_tweet_tweet', $twitters->channel->item[$i], $zebra);
  //coder module says this below needs to be like this!!! ??
  }
  }
  else{
  //coder module says above has to be this way
    //if this is the tweets block
    $count = $number;
    for ($i=0; $i<$count; $i++) {
	  //extra code
	  unset($zebra);
	  if($i == 0){$zebra = ' first';}
      $op .= theme('simple_tweet_tweet', $twitters->channel->item[$i], $zebra);
    }  
  }

  //closing div
  if ($number != '1') { 
    $op .= '</div>';
  }
  
  //this is to show the link to the users twitter account on twitter.com
  if ($number == NULL) {
    $op .= '<div class="simple-bottom">';
    $op .= '<a id="follow-twitter" href="http://twitter.com/' . variable_get('simple_tweet_username', '') .'">' . variable_get('simple_tweet_page_link', '') . '</a>';
    $op .= '</div>';  
  }
  else{
    //this is to show a link to the page of tweets
    $op .= '<div class="simple-bottom">';
    $op .= '<a class="follow-twitter" href="/' . SIMPLE_TWEET_PAGE .'">' . variable_get('simple_tweet_block_link', '') . '</a>';
    $op .= '</div>';    
  }
  return $op;
}

/**
 * theme_simple_tweet_tweet - format an individual tweet
 *
 * @param object $twit
 * @return string
 */
function theme_simple_tweet_tweet($twit, $zebra) {
  $date = _simple_tweet_format_date($twit->pubDate);
  $text = _simple_tweet_process_links($twit->description);
  //get the twitter username and colon of the tweet
  $twitter_username = variable_get('simple_tweet_username', '') . ":";
  $text = str_ireplace($twitter_username, "", $text);
  $text = trim($text);
  //add themeing html
  $op = '<div class="simple-tweet' . $zebra . '">';
  $op .= '<div class="simple-tweet-msg">'. $text .'</div>'; 
  $op .= '<div class="simple-tweet-created">'. $date .'</div>';
  $op .= '</div>';
  return $op;
}

/**
 * Get Tweets
 */
function _simple_tweet_get_twitters() {  
  //get rss url
  $rss_url = variable_get('simple_tweet_rss_url', '');
  if (!$rss_url) {
    drupal_set_message(t('Please set your Twitter User RSS Feed.'), 'error');
	//get out
	return;
  }else{
	  if (($cache = cache_get('simple_tweet_cached_data')) && !empty($cache->data))  {
		$twitters = unserialize($cache->data);
		return $twitters;		
	} 
	else
	{	
	  //if the tweets rss feed has an error
	  if (preg_match('/^http?:\/\/.+/', $rss_url)) {		  
		$twitter_xml = curl($rss_url);
		if(strpos($twitter_xml,'Rate limit exceeded.') <= 0)
		{			
			//parse the data 
			if(simplexml_load_string($twitter_xml)){
				$twitters = simplexml_load_string($twitter_xml);
				$serialized = str_replace(
					   array('O:16:"SimpleXMLElement":0:{}', 'O:16:"SimpleXMLElement":'),
					   array('s:0:"";', 'O:8:"stdClass":'),
					   serialize($twitters));						
				cache_set('simple_tweet_cached_data', $serialized,'cache', time() + (60 * 60));						
				//return tweets
				return $twitters; 
			}else{
				watchdog('simple_tweet', 'There is an issue with the RSS twitter Feed');
			}
		}
		else
		{
			watchdog('simple_tweet', 'Twitter Rate limit exceeded.');
		}		
	  }else{
		//log error
		watchdog('simple_tweet', 'There is an issue with the RSS twitter Feed');
		//get out
		return;
	  }
	}
  }
}

function curl($url){            
	$ch = curl_init();           
	curl_setopt($ch, CURLOPT_URL, $url);  
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);	
	curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);            
	return curl_exec($ch);           
	curl_close($ch);        
}

/**
 * Process Links in Tweets
 */
function _simple_tweet_process_links($text) {
  $text = preg_replace("#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t< ]*)#", "\\1<a href=\"\\2\" target=\"_blank\">\\2</a>", $text);
  $text = preg_replace("#(^|[\n ])((www|ftp)\.[^ \"\t\n\r< ]*)#", "\\1<a href=\"http://\\2\" target=\"_blank\">\\2</a>", $text);
  $text = preg_replace("/@(\w+)/", "<a href=\"http://www.twitter.com/\\1\" target=\"_blank\">@\\1</a>", $text);
  $text = preg_replace("/#(\w+)/", "<a href=\"http://search.twitter.com/search?q=\\1\" target=\"_blank\">#\\1</a>", $text);
  return $text;
}

/**
 * Format Dates in Tweets
 */
function _simple_tweet_format_date($date) {
   $date = strtotime($date);
   $type = variable_get('simple_tweet_dateformat', 'medium');
   $system = array('small', 'medium', 'large');
   if (!in_array($type, $system)) {
     $format = variable_get('date_format_' . $type, 'medium');
     $type = 'custom';
     return format_date($date, $type, $format);
   }
   else {
     return format_date($date, $type);
   }
}
